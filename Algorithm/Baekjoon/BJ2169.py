import sys
sys.stdin = open('input.txt', 'r')


N, M = map(int, input().split())
arr = [list(map(int, input().split())) for _ in range(N)]
for r in range(N):
    for c in range(M):
        # 배열 살짝 수정
        # [땅의 가치, 왼쪽에서 넘어올 수 있는 가장 많은 누적 가치, 위쪽~~, 오른쪽~~]
        arr[r][c] = [arr[r][c], 0, 0, 0]
        # 0번째 행이 아닐 때
        if r:
            # 0번째 열이면 왼쪽에서 올 수 없으므로 1번 인덱스에 엄청 작은 값 넣기
            # 어차피 최대 누적을 찾아갈 거라 엄청 작은 값은 코드에 영향을 안 미침
            if not c:
                arr[r][c][1] = -101 * N * M
            # 마지막 열이면 오른쪽에서 올 수 없으므로 3번 인덱스에 엄청 작은 값 넣기
            if c == M-1:
                arr[r][c][3] = -101 * N * M
            # 위쪽에서 내려온 가치 = 위쪽 칸의 가치 + 위쪽 칸에서 이동해올 때의 누적 가치 중 제일 큰 값
            arr[r][c][2] = arr[r-1][c][0] + max(arr[r-1][c][1], arr[r-1][c][2], arr[r-1][c][3])
        # 0명째 열이 아닐 때
        if c:
            # 0번째 행이면
            if not r:
                # 위쪽, 오른쪽에서는 올 수 없으므로 작은 값 넣기
                arr[r][c][2] = -101 * N * M
                arr[r][c][3] = -101 * N * M
            # 열에 대한 for문이 왼->오 방향으로 돌고 있으므로
            # 왼쪽에서 이동해오는 누적 가치만 계산
            # 왼쪽에서 이동해오는 누적 가치 = 왼쪽 칸 가치 + 왼쪽 칸에서 이동해올 때 왼쪽 누적가치, 위쪽 누적 가치중 큰 값
            arr[r][c][1] = arr[r][c-1][0] + max(arr[r][c-1][1], arr[r][c-1][2])
    # 오른쪽에서 오는 누적 가치 계산할거임
    # 0번째 행은 오른쪽에서 올 수가 없어서,
    # 마지막 행은 계산할 필요가 없어서 계산 안 함
    # 0번째 행, 마지막 행이 아니면
    if 0 < r < N-1:
        # 열을 오->왼 방향으로 순환
        # 오른쪽에서 이동해오는 누적 가치 = 오른쪽 칸 가치 + 오른쪽 칸에서 이동해올 때 오른쪽 누적가치, 위쪽 누적 가치중 큰 값
        for c in range(M-2, -1, -1):
            arr[r][c][3] = arr[r][c+1][0] + max(arr[r][c+1][2], arr[r][c+1][3])

# 마지막 칸의 가치 + 왼쪽 & 위쪽 누적 가치 중 큰 값
print(arr[N-1][M-1][0] + max(arr[N-1][M-1][1], arr[N-1][M-1][2]))